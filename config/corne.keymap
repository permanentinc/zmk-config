/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/*
* &led_strip {
*     // chain-length = <0>;
* 
*     //chain-length = <6>;
* 
*     // 21 backlight + 6 glowlight
* };
*/

/ {
    combos {
        compatible = "zmk,combos";

        command_tilde {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <12 36>;
        };

        thirdlayer {
            bindings = <&mo 3>;
            key-positions = <37 40>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <0 11>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <38 39>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <29 30>;
        };

        deleteword {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <5 6>;
        };

        emoji {
            bindings = <&kp LG(LC(SPACE))>;
            key-positions = <17 18>;
        };

        back {
            bindings = <&kp LG(LEFT_BRACKET)>;
            key-positions = <37 40 28>;
        };

        forward {
            bindings = <&kp LG(RIGHT_BRACKET)>;
            key-positions = <40 37 31>;
        };

        racast {
            bindings = <&kp LG(SPACE)>;
            key-positions = <29 30>;
        };

        leftparent {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 5>;
        };

        rightparent {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
        };

        leftbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <16 17>;
        };

        rightbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <18 19>;
        };

        leftbracket {
            bindings = <&kp LG(LEFT_BRACKET)>;
            key-positions = <17 16 15>;
        };

        rightbracket {
            bindings = <&kp LG(RIGHT_BRACKET)>;
            key-positions = <18 19 20>;
        };

        rightmeh {
            bindings = <&kp LG(LEFT_ALT)>;
            key-positions = <19 20 21>;
        };

        rightmeh2 {
            bindings = <&kp LG(LC(LS(LEFT_ALT)))>;
            key-positions = <31 33 32>;
        };

        layer4 {
            bindings = <&mo 4>;
            key-positions = <7 8 9>;
        };

        leftsquarebracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <28 29>;
        };

        rightsquarebracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <30 31>;
        };
    };

    macros {
        up_several: up_several {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UP_ARROW &kp UP_ARROW &kp UP_ARROW>;
            label = "UP_SEVERAL";
        };

        down_several: down_several {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp DOWN_ARROW &kp DOWN_ARROW>;
            label = "DOWN_SEVERAL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | ENT |   | SPC | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T      &kp Y      &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G      &kp H      &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B      &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                         &kp LGUI  &mo 1  &kp RET    &kp SPACE  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | RET |   | SPACE |     | ALT |

            bindings = <
&kp TAB     &kp N1           &kp N2           &kp N3           &kp N4           &kp N5             &kp N6     &kp N7        &kp N8        &kp N9        &kp N0           &kp LA(BSPC)
&bt BT_CLR  &bt BT_SEL 0     &bt BT_SEL 1     &rgb_ug RGB_SAD  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG    &kp MINUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_ASTERISK  &trans
&kp LSHFT   &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_HUI    &kp EQUAL  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DOT          &trans
                                              &kp LGUI         &trans           &kp RET            &kp SPACE  &kp NUMBER_0  &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | RET |   | SPACE |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT          &kp HASH      &kp DLLR       &kp PRCNT    &trans     &kp LA(LEFT)              &mt RG(RC(RA(RS(UP_ARROW)))) UP_ARROW      &kp LA(RIGHT)              &kp PLUS   &kp DEL
&kp LCTRL  &kp AMPS  &kp UNDERSCORE  &kp ASTERISK  &kp BACKSLASH  &kp PIPE     &trans     &kp LEFT_ARROW            &mt RG(RC(RA(RS(DOWN_ARROW)))) DOWN_ARROW  &kp RIGHT                  &kp MINUS  &kp GRAVE
&kp LSHFT  &trans    &trans          &trans        &trans         &trans       &trans     &kp LS(LG(LA(LC(LEFT))))  &kp LS(LA(LC(LG(UP_ARROW))))               &kp LA(LC(LG(LS(RIGHT))))  &kp EQUAL  &kp TILDE
                                     &kp LGUI      &trans         &kp RET      &kp SPACE  &trans                    &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &kp EQUAL  &kp C_VOLUME_UP    &trans     &kp ASTERISK     &trans  &trans          &kp C_VOLUME_UP    &trans      &kp PLUS  &kp C_VOLUME_UP
&trans  &trans  &kp SLASH  &kp C_VOLUME_DOWN  &kp SLASH  &trans           &trans  &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_NEXT  &trans    &trans
&trans  &trans  &trans     &kp K_MUTE         &trans     &kp BACKSLASH    &trans  &kp MINUS       &kp K_MUTE         &trans      &trans    &trans
                           &trans             &trans     &trans           &trans  &trans          &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(N5)    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans            &trans            &trans            &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans            &trans            &trans            &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                            &trans            &trans            &trans        &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
